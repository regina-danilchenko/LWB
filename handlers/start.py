from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext

from data import db_session
from data.user import User

from utils.states import Form


# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
start_router = Router()


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@start_router.message(Command('start'))
async def process_start_command(message: Message, state: FSMContext):
    db_sess = db_session.create_session()
    users_ids = [user.tg_id for user in db_sess.query(User).all()]
    user_id = message.from_user.id
    if not user_id in users_ids:
        await state.set_state(Form.choice_language)
        keyboard_language = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), KeyboardButton(text="–ö–∏—Ç–∞–π—Å–∫–∏–π")],
                      [KeyboardButton(text="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"), KeyboardButton(text="–ò—Å–ø–∞–Ω—Å–∫–∏–π")],
                      [KeyboardButton(text="–ù–µ–º–µ—Ü–∫–∏–π"),
                       KeyboardButton(text="–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π")],
                      [KeyboardButton(text="–†—É—Å—Å–∫–∏–π"), KeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π")]])

        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n'
                             '–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞.\n\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞.', reply_markup=keyboard_language)
    else:
        text = """
üåü–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LearnWordsBot!üåü

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
‚úÖ –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å
‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –ª–µ–≥–∫–æ
‚úÖ –ü—Ä–µ–æ–¥–æ–ª–µ—Ç—å —è–∑—ã–∫–æ–≤–æ–π –±–∞—Ä—å–µ—Ä

–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? üöÄ
–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ! üëá
"""
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"))
        builder.add(types.InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", callback_data="open_dict"))
        builder.add(types.InlineKeyboardButton(text="üéì –£—á–∏—Ç—å", callback_data="learn"))
        builder.add(types.InlineKeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="test"))
        builder.add(types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
        builder.adjust(2)

        await message.answer(text, reply_markup=builder.as_markup())


# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@start_router.message(Form.choice_language)
async def choice_language(message: Message, state: FSMContext):
    await state.clear()
    language = message.text
    language_to_code = {
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en',
        '–ö–∏—Ç–∞–π—Å–∫–∏–π': 'zh',
        '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr',
        '–ò—Å–ø–∞–Ω—Å–∫–∏–π': 'es',
        '–ù–µ–º–µ—Ü–∫–∏–π': 'de',
        '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π': 'pt',
        '–ö–∞–∑–∞—Ö—Å–∫–∏–π': 'kk'
    }
    language_code = language_to_code.get(language)
    if not language_code:
        language_code = 'ru'

    db_sess = db_session.create_session()
    user = User()
    user.tg_id = message.from_user.id
    user.username = message.from_user.username
    user.language_preference = language_code
    user.statistics = 0
    db_sess.add(user)
    db_sess.commit()

    text = (f'‚úÖ –í—ã, {message.from_user.username}, –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚úÖ\n'
            '\n'
            '–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n'
            '\n'
            'üëç–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!üëç')
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
