from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from datetime import datetime

from data import db_session
from data.user import User
from data.word import Word
from data.image import Image

from utils.functions import translate

from utils.common import print_text
from utils.states import Form


# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
add_router = Router()


# –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@add_router.message(Command('add'))
@add_router.callback_query(lambda c: c.data == "add")
async def process_add(request: Message, state: FSMContext):
    await state.set_state(Form.add_word)
    text = '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã—É—á–∏—Ç—å.'
    await print_text(request, text)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@add_router.message(Form.add_word)
async def add_word(message: Message, state: FSMContext):
    await state.set_state(Form.add_image)
    original_word = message.text
    db_sess = db_session.create_session()
    language = db_sess.query(User).filter(User.tg_id == message.from_user.id).first().language_preference

    # –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
    translated_word = translate(original_word.capitalize(), language)

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞
    db_sess = db_session.create_session()
    word = Word()
    word.original_word = translated_word.capitalize()
    word.translation = original_word.capitalize()
    word.last_reviewed = datetime.now()
    db_sess.add(word)
    db_sess.commit()

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π user_to_word –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü user –∏ word
    db_sess = db_session.create_session()
    user_id = message.from_user.id
    user = db_sess.query(User).filter(User.tg_id == user_id).first()
    user.words.append(word)
    id_word = word.id
    db_sess.commit()

    # –ø–µ—Ä–µ–¥–∞—á–∞ id —Å–ª–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await state.update_data(id_word=id_word)
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–ª–æ–≤—É, —á—Ç–æ–±—ã –ª—É—á—à–µ –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@add_router.message(Form.add_image)
async def add_image(message: Message, state: FSMContext):
    try:
        photos = message.photo
        file_id = photos[-1].file_id

        # –ø–æ–ª—É—á–µ–Ω–∏–µ id –∏–∑ –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        data = await state.get_data()
        await state.clear()
        db_sess = db_session.create_session()
        word = db_sess.query(Word).filter(Word.id == data["id_word"]).first()

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        db_sess = db_session.create_session()
        image = Image()
        image.word_id = word.id
        image.file_id = file_id
        db_sess.add(image)
        db_sess.commit()

        text = (f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ!\n'
                             f'\n'
                             f'–°–ª–æ–≤–æ: {word.original_word.capitalize()}\n'
                             f'–ü–µ—Ä–µ–≤–æ–¥: {word.translation.capitalize()}\n'
                             f'–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—è: {datetime.now().strftime("%d.%m.%Y")}\n'
                             f'\n'
                             f'üëç–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!üëç')

        await message.answer_photo(photo=file_id, caption=text)
    except TypeError:
        await message.answer('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
