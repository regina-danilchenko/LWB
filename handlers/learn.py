import os
import logging
from random import shuffle
import random

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from data import db_session
from data.image import Image
from data.user import User
from data.word import Word

from utils.common import print_text
from utils.states import Form


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
learn_router = Router()

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
visited = 0
db_sess = None
current_image_index = 0
current_game_round = {}
MAX_ROUNDS = 5
correct_answers = 0


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_words(user_id):
    global db_sess
    user = db_sess.query(User).filter(User.tg_id == user_id).first()
    return user.words if user else []


# –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
@learn_router.message(Command('learn'))
@learn_router.callback_query(lambda c: c.data == "learn")
async def process_learn(request: Message | CallbackQuery):
    global db_sess
    db_sess = db_session.create_session()
    user_id = request.from_user.id
    words = [user.words for user in db_sess.query(User).filter(User.tg_id == user_id).all()][0]

    if len(words) < 5:
        text = "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /add"
        await print_text(request, text)
        return

    text = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ üëá"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üñºÔ∏è –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="show_cards"))
    builder.add(types.InlineKeyboardButton(text="üéØ –°–æ–ø–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="word_to_card_game"))
    builder.add(types.InlineKeyboardButton(text="ü§î –£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞", callback_data="guess_word_translation_game"))
    builder.adjust(1)

    await print_text(request, text, builder.as_markup())


# –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–µ–∫
@learn_router.callback_query(lambda c: c.data == "show_cards")
async def show_cards(request: CallbackQuery):
    global db_sess
    user_id = request.from_user.id
    words = [user.words for user in db_sess.query(User).filter(User.tg_id == user_id).all()][0]
    global visited

    if visited == len(words):
        visited = 0
        text = "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!"
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            callback_data="show_cards"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="start"
        ))
        builder.adjust(1)
        await request.message.delete()
        await request.message.answer(text, reply_markup=builder.as_markup())
    else:
        await show_one_card(words[visited], request)
        visited += 1


# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥—è–ª –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
async def show_one_card(current_word, request):
    global db_sess
    original_word = current_word.original_word
    translation = current_word.translation

    text = f"–°–ª–æ–≤–æ: {original_word.capitalize()}\n–ü–µ—Ä–µ–≤–æ–¥: {translation.capitalize()}"
    image = db_sess.query(Image).filter(Image.word_id == current_word.id).first()

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="show_cards"))

    if image:
        await request.message.edit_media(
            InputMediaPhoto(media=image.file_id,caption=text), reply_markup=builder.as_markup()
        )
    else:
        photo = types.FSInputFile(os.path.join('static', 'images', 'no_image.png'))
        await request.message.edit_media(
            InputMediaPhoto(media=photo, caption=text), reply_markup=builder.as_markup()
        )

    await request.answer()


# —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@learn_router.callback_query(lambda c: c.data == "word_to_card_game")
async def word_to_card_game(request: CallbackQuery):
    global current_game_round
    user_id = request.from_user.id
    current_game_round[user_id] = 1
    await word_to_card_game_logic(user_id, request.message)


# –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "—Å–æ–ø–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"
async def word_to_card_game_logic(user_id: int, message: Message):
    session = db_session.create_session()
    try:
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user or not user.words:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
            return

        words_with_images = (
            session.query(Word)
            .join(Image)
            .filter(Word.id.in_([w.id for w in user.words]))
            .all()
        )
        if len(words_with_images) < 4:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã.")
            return

        shuffle(words_with_images)
        game_words = words_with_images[:4]
        correct_word = game_words[0]

        images = session.query(Image).filter(Image.word_id == correct_word.id).all()
        if not images:
            await message.answer("–£ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.")
            return

        shuffle(images)
        image = images[0]

        builder = InlineKeyboardBuilder()
        for word in game_words:
            builder.button(
                text=word.original_word,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ)
                callback_data=f"wcard_ans_{word.id}_{correct_word.id}_{user_id}"
            )
        builder.adjust(2)

        await message.answer_photo(
            photo=image.file_id,
            caption=f"–†–∞—É–Ω–¥ {current_game_round.get(user_id, 1)} –∏–∑ {MAX_ROUNDS}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=builder.as_markup()
        )
    finally:
        session.close()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
@learn_router.callback_query(lambda c: c.data.startswith("wcard_ans_"))
async def check_word_card_answer(callback: CallbackQuery):
    global current_game_round, correct_answers
    session = db_session.create_session()
    try:
        _, _, selected_id, correct_id, user_id = callback.data.split("_")
        selected_id = int(selected_id)
        correct_id = int(correct_id)
        user_id = int(user_id)

        if selected_id == correct_id:
            user = session.query(User).filter(User.tg_id == user_id).first()
            if user:
                user.statistics = (user.statistics or 0) + 1
                session.commit()

            correct_answers += 1
            await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ", show_alert=True)
        else:
            correct_word = session.query(Word).get(correct_id)
            correct_translation = correct_word.translation  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            original_word = correct_word.original_word  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
            await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {original_word} - {correct_translation}", show_alert=True)



        await callback.message.delete()

        # –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        current_round = current_game_round.get(user_id, 1)
        if current_round < MAX_ROUNDS:
            current_game_round[user_id] = current_round + 1
            await word_to_card_game_logic(user_id, callback.message)
        else:
            current_game_round[user_id] = 1
            kb = InlineKeyboardBuilder()
            kb.add(types.InlineKeyboardButton(
                text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                callback_data="word_to_card_game"
            ))
            kb.add(types.InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="start"
            ))
            kb.adjust(1)

            result_text = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –∏–∑ {MAX_ROUNDS}."
            await callback.message.answer(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üéâ\n{result_text}", reply_markup=kb.as_markup())

            correct_answers = 0

    except Exception as e:
        logger.error(f"Error in check_word_card_answer: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        session.close()


# —É–≥–∞–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
@learn_router.callback_query(lambda c: c.data == "guess_word_translation_game")
async def guess_word_translation_game(request: CallbackQuery, state: FSMContext):
    global db_sess
    user_id = request.from_user.id
    words = [user.words for user in db_sess.query(User).filter(User.tg_id == user_id).all()][0]
    word = random.choice(words)

    prompt_variants = [
        f"–°–ª–æ–≤–æ: {word.translation}\n–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∏–∂–µ üëá\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /stop",
        f"–ü–µ—Ä–µ–≤–æ–¥ –∫–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞: {word.translation}?\n–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ üëá\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop",
        f"–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: {word.translation}\n–ñ–¥—É —Ç–≤–æ–π –æ—Ç–≤–µ—Ç üëá\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å ‚Äî –≤–≤–µ–¥–∏ /stop",
        f"–ó–Ω–∞—á–µ–Ω–∏–µ: {word.translation}\n–ö–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ?\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ üëá –∏–ª–∏ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        f"–í–æ—Ç —Å–ª–æ–≤–æ: {word.translation}\n–í–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∏–∂–µ üëá\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /stop",
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: {word.translation}\n–ü–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç üëá\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî /stop",
        f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´{word.translation}¬ª –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ?\n–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏ –Ω–∏–∂–µ üëá\n–î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî /stop"
    ]

    await state.set_state(Form.guess_translation)
    await state.update_data(correct_answer=word.original_word)
    await print_text(request, random.choice(prompt_variants))


# –ø—Ä–æ–≤–µ—Ä–∫–∞, —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥
@learn_router.message(Form.guess_translation)
async def check_correct_guess(request: Message, state: FSMContext):
    user_answer = request.text
    data = await state.get_data()
    wrong_variants = [
        "–ù–µ —É–≥–∞–¥–∞–ª–∏ üòû. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
        "–£–≤—ã, –º–∏–º–æ! –ù–æ –≤—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å üí™",
        "–ù–µ —Ç–æ —Å–ª–æ–≤–æ... –ï—â—ë –ø–æ–ø—ã—Ç–∫–∞?",
        "–ü–æ—á—Ç–∏! –ù–æ –ø–æ–∫–∞ –Ω–µ—Ç. –î–∞–ª—å—à–µ –±—É–¥–µ—Ç –ª—É—á—à–µ!",
        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–π—á–∞—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòï. –î–∞–≤–∞–π—Ç–µ –µ—â—ë –ø–æ–¥—É–º–∞–µ–º!",
        "–≠—Ö, –Ω–µ —Ç–æ! –ù–æ –≤—ã —Ç–æ—á–Ω–æ –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!"
    ]
    success_variants = [
        "–í–µ—Ä–Ω–æ! üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
        "–£–≥–∞–¥–∞–ª–∏! üî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
        "–ë—Ä–∞–≤–æ! üí° –í—ã –Ω–∞ –≤–æ–ª–Ω–µ!",
        "–¢–æ—á–Ω–æ! üëç –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üèÜ –í—ã –º–æ–ª–æ–¥–µ—Ü!",
        "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç! ‚úÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –∂–¥—ë—Ç!",
        "–û—Ç–≥–∞–¥–∞–Ω–æ! üéØ –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!"
    ]
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚è≠Ô∏è –î–∞–ª—å—à–µ",
        callback_data="guess_word_translation_game"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="start"
    ))
    builder.adjust(1)

    if user_answer == '/stop':
        text = f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª: {data["correct_answer"]}'
        await state.clear()
        await print_text(request, text, builder.as_markup())
    elif data['correct_answer'] == user_answer.capitalize():
        await state.clear()
        await print_text(request, random.choice(success_variants), builder.as_markup())
    else:
        await print_text(request, random.choice(wrong_variants))
