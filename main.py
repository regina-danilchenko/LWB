import asyncio
import logging


from functions import translate
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import BotCommand, Message, CallbackQuery, ReplyKeyboardRemove
from config import BOT_TOKEN
from database import insert_word as db_add_word, get_all_words, conn


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
dp = Dispatcher()

# –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ
language_code = None


class Form(StatesGroup):
    add = State()
    language = State()


async def main():
    bot = Bot(token=BOT_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    await set_main_menu(bot)
    await dp.start_polling(bot)


# –º–µ–Ω—é—à–∫–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/start', description='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/add', description='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'),
        BotCommand(command='/learn', description='üéì –£—á–∏—Ç—å'),
        BotCommand(command='/test', description='üìù –ü—Ä–æ–≤–µ—Ä–∫–∞'),
        BotCommand(command='/help', description='‚ùì –ü–æ–º–æ—â—å')
    ]
    await bot.set_my_commands(main_menu_commands)


# –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def print_text(request, text, keyboard=None):
    if isinstance(request, CallbackQuery):
        if keyboard:
            await request.message.answer(text, reply_markup=keyboard)
        else:
            await request.message.answer(text)
        await request.answer()
    else:
        if keyboard:
            await request.answer(text, reply_markup=keyboard)
        else:
            await request.answer(text)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command('start'))
async def process_start_command(message: Message):
    text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LearnWordsBot! üåü

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ: 
‚úÖ –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å 
‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –ª–µ–≥–∫–æ 
‚úÖ –ü—Ä–µ–æ–¥–æ–ª–µ—Ç—å —è–∑—ã–∫–æ–≤–æ–π –±–∞—Ä—å–µ—Ä 

–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? üöÄ 
–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ! üëá
"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"))
    builder.add(types.InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", callback_data="open_dict"))
    builder.add(types.InlineKeyboardButton(text="üéì –£—á–∏—Ç—å", callback_data="learn"))
    builder.add(types.InlineKeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="test"))
    builder.add(types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    builder.adjust(2)
    await message.answer(text, reply_markup=builder.as_markup())

# –ø–æ–º–æ—â—å
@dp.message(Command('help'))
@dp.callback_query(lambda c: c.data == "help")
async def process_help(request: Message | CallbackQuery):
    text = """
‚ùì –ß—Ç–æ —É–º–µ–µ—Ç LearnWordsBot? ‚ùì

‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ (/add)
üéì –£—á–∏—Ç—å —Å —É–º–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º (/learn)
üìù –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è (/test)

–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üöÄ
–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!
"""
    await print_text(request, text)


# –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Command('add'))
@dp.callback_query(lambda c: c.data == "add")
async def process_add(request: Message, state: FSMContext):
    await state.set_state(Form.language)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–æ.'
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), KeyboardButton(text="–ö–∏—Ç–∞–π—Å–∫–∏–π")],
                                    [KeyboardButton(text="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"), KeyboardButton(text="–ò—Å–ø–∞–Ω—Å–∫–∏–π")],
                                    [KeyboardButton(text="–ù–µ–º–µ—Ü–∫–∏–π"), KeyboardButton(text="–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π")],
                                    [KeyboardButton(text="–†—É—Å—Å–∫–∏–π"), KeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π")]])
    await print_text(request, text, keyboard=keyboard)


# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ
@dp.message(Form.language)
async def choice_language(message: Message, state: FSMContext):
    await state.set_state(Form.add)
    language = message.text
    global language_code
    if language == '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π':
        language_code = 'en'
    elif language == '–ö–∏—Ç–∞–π—Å–∫–∏–π':
        language_code = 'zh'
    elif language == '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π':
        language_code = 'fr'
    elif language == '–ò—Å–ø–∞–Ω—Å–∫–∏–π':
        language_code = 'es'
    elif language == '–ù–µ–º–µ—Ü–∫–∏–π':
        language_code = 'de'
    elif language == '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π':
        language_code = 'pt'
    elif language == '–ö–∞–∑–∞—Ö—Å–∫–∏–π':
        language_code = 'kk'
    else:
        language_code = 'ru'

    text = '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.'
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@dp.message(Form.add)
async def add_word(message: Message, state: FSMContext):
    global language_code
    await state.clear()
    word = message.text
    translated_word, original_language = translate(word.capitalize(), language_code)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_add_word(conn, word.capitalize(), translated_word, original_language, language_code)
    
    await message.answer(f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ!\n'
                         f'\n'
                         f'–°–ª–æ–≤–æ: {word.capitalize()}\n'
                         f'–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {translate(word.capitalize(), language_code)[1]}\n'
                         f'–ü–µ—Ä–µ–≤–æ–¥: {translate(word.capitalize(), language_code)[0]}\n'
                         f'–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {language_code}\n'
                         f'\n'
                         f'üëç–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!üëç')
    language_code = None



# –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ª–æ–≤
@dp.message(Command('open_dict'))
@dp.callback_query(lambda c: c.data == "open_dict")
async def process_add(request: Message | CallbackQuery):
    words = get_all_words(conn)
    if not words:
        text = "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add"
    else:
        text = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
        for word in words:
            text += (f"üîπ {word[1]} ({word[3]}) ‚Üí {word[2]} ({word[4]})\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {word[5]}\n\n")
    await print_text(request, text)


# –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
@dp.message(Command('learn'))
@dp.callback_query(lambda c: c.data == "learn")
async def process_learn(request: Message | CallbackQuery):
    text = "–§—É–Ω–∫—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è"
    await print_text(request, text)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤
@dp.message(Command('test'))
@dp.callback_query(lambda c: c.data == "test")
async def process_test(request: Message | CallbackQuery):
    text = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è"
    await print_text(request, text)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dp.message()
# async def echo_message(message: Message):
#     text = "–Ø –≤–∏–∂—É —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å üòû"
#     await message.answer(text)


if __name__ == '__main__':
    asyncio.run(main())