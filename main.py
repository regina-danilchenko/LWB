import asyncio
import logging


from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand
from config import BOT_TOKEN


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
dp = Dispatcher()


async def main():
    bot = Bot(token=BOT_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    await set_main_menu(bot)
    await dp.start_polling(bot)


# –º–µ–Ω—é—à–∫–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/start', description='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/add', description='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'),
        BotCommand(command='/learn', description='üéì –£—á–∏—Ç—å'),
        BotCommand(command='/test', description='üìù –ü—Ä–æ–≤–µ—Ä–∫–∞'),
        BotCommand(command='/help', description='‚ùì –ü–æ–º–æ—â—å')
    ]
    await bot.set_my_commands(main_menu_commands)


# –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def print_text(request, text):
    if isinstance(request, types.CallbackQuery):
        await request.message.answer(text)
        await request.answer()
    else:
        await request.answer(text)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command('start'))
async def process_start_command(message: types.Message):
    text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LearnWordsBot! üåü

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ: 
‚úÖ –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å 
‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –ª–µ–≥–∫–æ 
‚úÖ –ü—Ä–µ–æ–¥–æ–ª–µ—Ç—å —è–∑—ã–∫–æ–≤–æ–π –±–∞—Ä—å–µ—Ä 

–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? üöÄ 
–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ! üëá
"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"))
    builder.add(types.InlineKeyboardButton(text="üéì –£—á–∏—Ç—å", callback_data="learn"))
    builder.add(types.InlineKeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="test"))
    builder.add(types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    builder.adjust(2)
    await message.answer(text, reply_markup=builder.as_markup())

# –ø–æ–º–æ—â—å
@dp.message(Command('help'))
@dp.callback_query(lambda c: c.data == "help")
async def process_help(request: types.Message | types.CallbackQuery):
    text = """
‚ùì –ß—Ç–æ —É–º–µ–µ—Ç LearnWordsBot? ‚ùì

‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ (/add)
üéì –£—á–∏—Ç—å —Å —É–º–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º (/learn)
üìù –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è (/test)

–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üöÄ
–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!
"""
    await print_text(request, text)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Command('add'))
@dp.callback_query(lambda c: c.data == "add")
async def process_add(request: types.Message | types.CallbackQuery):
    text = "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è"
    await print_text(request, text)


# –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
@dp.message(Command('learn'))
@dp.callback_query(lambda c: c.data == "learn")
async def process_learn(request: types.Message | types.CallbackQuery):
    text = "–§—É–Ω–∫—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è"
    await print_text(request, text)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤
@dp.message(Command('test'))
@dp.callback_query(lambda c: c.data == "test")
async def process_test(request: types.Message | types.CallbackQuery):
    text = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è"
    await print_text(request, text)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def echo_message(message: types.Message):
    text = "–Ø –≤–∏–∂—É —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å üòû"
    await message.answer(text)


if __name__ == '__main__':
    asyncio.run(main())
